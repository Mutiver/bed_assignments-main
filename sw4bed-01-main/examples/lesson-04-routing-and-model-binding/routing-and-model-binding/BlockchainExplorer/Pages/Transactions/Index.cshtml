@page
@model BlockchainExplorer.Pages.Transactions.IndexModel
@{
  ViewData["Title"] = "Transactions 💸";
}
<h1>@ViewData["Title"] (@Model.Transactions.Count)</h1>
<form method="post">
  <div class="input-group input-group-sm mb-3">
    <span class="input-group-text" id="inputGroup-sizing-sm">From</span>
    <input type="text" class="form-control" aria-label="Sizing example input" asp-for="TimeFilter.From" aria-describedby="inputGroup-sizing-sm">
    <span class="input-group-text" id="inputGroup-sizing-sm">To</span>
    <input type="text" class="form-control" aria-label="Sizing example input" asp-for="TimeFilter.To" aria-describedby="inputGroup-sizing-sm">
    <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Submit</button>
  </div>
</form>
@if(ModelState.IsValid) {
  <ul class="list-group">
    @foreach (var t in Model.Transactions)
    {
      <li class="list-group-item d-flex justify-content-between align-items-start">
        <div class="ms-2 me-auto">
          <div class="fw-bold">@DateTimeOffset.FromUnixTimeSeconds(@t.Timestamp).DateTime.Date.ToLongDateString()</div>
          <div class="fs-6 text-muted">@t.Timestamp</div>
          <code><a href='@(Url.Page("/Wallets/Details", new { wallet = t.Sender}))'>@t.Sender</a></code> to <code><a href='@(Url.Page("/Wallets/Details", new { wallet = t.Recipient}))'>@t.Recipient</a></code>
        </div>
        <span class="badge bg-primary rounded-pill align-self-center">@t.Amount</span>
      </li>
    }
  </ul>
} else {
  <div class="alert alert-danger" role="alert">
    Out of range
  </div>
}
